<!-- Dark Skin -->
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
>

    <!--Control colors.-->
    <Color x:Key="DarkForegroundColor">#000000</Color>
    <Color x:Key="LightControlForegroundColor">#eeeeee</Color>
    <Color x:Key="PrimaryLightColor">#c40006</Color>
    <Color x:Key="SecondaryLightColor">#440000</Color>
    <Color x:Key="PrimaryDarkBackgroundColor">#000000</Color>
    <Color x:Key="SecondaryDarkBackgroundColor">#161616</Color>
    <Color x:Key="Transparent">#00000000</Color>
    <Color x:Key="DarkItemHoverColor">#666666</Color>
    <Color x:Key="DarkItemHoverColor2">#aaffffff</Color>
    <Color x:Key="HeaderBGColor">#440000</Color>

    <!--Color brushes.-->
    <SolidColorBrush  x:Key="DarkForegroundBrush" Color="{StaticResource LightControlForegroundColor}"/>
    <SolidColorBrush  x:Key="LightControlForegroundBrush" Color="{StaticResource LightControlForegroundColor}"/>
    <SolidColorBrush  x:Key="PrimaryLightBrush" Color="{StaticResource PrimaryLightColor}"/>
    <SolidColorBrush  x:Key="SecondaryLightBrush" Color="{StaticResource SecondaryLightColor}"/>
    <SolidColorBrush  x:Key="PrimaryDarkBackgroundBrush" Color="{StaticResource PrimaryDarkBackgroundColor}"/>
    <SolidColorBrush  x:Key="SecondaryDarkBackgroundBrush" Color="{StaticResource SecondaryDarkBackgroundColor}"/>
    <SolidColorBrush  x:Key="TransparentBrush" Color="{StaticResource Transparent}"/>
    <SolidColorBrush  x:Key="DarkItemHoverBrush" Color="{StaticResource DarkItemHoverColor}"/>
    <SolidColorBrush  x:Key="LightControlForegroundBrush2" Color="{StaticResource DarkItemHoverColor2}"/>
    <SolidColorBrush  x:Key="DarkItemHoverBrush2" Color="{StaticResource DarkItemHoverColor}" Opacity="0.4" />
    <SolidColorBrush  x:Key="DarkItemHoverBrush3" Color="#bbb"  />
    <SolidColorBrush  x:Key="DarkItemHoverBrush4" Color="#303030"/>
    <SolidColorBrush  x:Key="HeaderBGBrush" Color="{StaticResource HeaderBGColor}" />

    <!-- Controls Defaults-->
    <System:Double x:Key="DefaultFontSize">16</System:Double>

    <!-- Storyboards -->
    <Storyboard x:Key="OverlayChange" AutoReverse="True" RepeatBehavior="Forever">
        <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="Opacity"  By="0.1" Duration="0:0:1" BeginTime="0:0:0"/>
    </Storyboard>
    <Storyboard x:Key="StopOverlayChange">
        <DoubleAnimation Storyboard.TargetName="Overlay" Storyboard.TargetProperty="Opacity"  From="0" To="0" Duration="0:0:1"/>
    </Storyboard>
    <Storyboard x:Key="Enlarge" AutoReverse="True" RepeatBehavior="Forever">
        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" To="1.05"/>
        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" To="1.05"/>
    </Storyboard>

    <!-- BORDER -->
    <Style  TargetType="Border">
        <Setter Property="BorderBrush" Value="{StaticResource LightControlForegroundBrush}"/>
    </Style>

    <!-- Button -->
    <Style TargetType="{x:Type Button}">
        <Setter Property="RenderTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1" ScaleY="1."/>
            </Setter.Value>
        </Setter>
        <Setter Property="RenderTransformOrigin" Value="0.5, 0.5"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Foreground" Value="{StaticResource LightControlForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="buttonBorder"   BorderBrush="{StaticResource SecondaryLightBrush}" BorderThickness="1" CornerRadius="2" Background="{StaticResource PrimaryLightBrush}">
                        <Grid >
                            <Rectangle x:Name="Overlay" Fill="White" Opacity="0"/>
                            <ContentPresenter  HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                        <Border.Effect>
                            <DropShadowEffect ShadowDepth="1" />
                        </Border.Effect>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!--Animaiton on hover-->
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="ButtonMouseHoverStoryboard" Storyboard="{StaticResource Enlarge}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="ButtonMouseHoverStoryboard"  />
                            </Trigger.ExitActions>
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.2" />
                            <!--<Setter Property="RenderTransformOrigin" Value="0.5, 0.5"/>
                            <Setter Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX="1.05" ScaleY="1.05"/>
                                </Setter.Value>
                            </Setter>-->
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Overlay" Property="Opacity" Value="0.05" />
                            <Setter TargetName="Overlay" Property="Fill" Value="Black" />
                            <Setter Property="RenderTransformOrigin" Value="0.2, 0.2"/>
                            <Setter Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX="1.05" ScaleY="1.05"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Window-->
    <Style TargetType="{x:Type Window}">
        <Setter Property="Background" Value="{StaticResource PrimaryDarkBackgroundBrush}"/>
    </Style>

    <!--Grid BG-->
    <Style TargetType="{x:Type Grid}">
        <Style.Triggers>
            <Trigger Property="Tag" Value="gridBG">
                <Setter Property="Background" Value="{StaticResource SecondaryDarkBackgroundBrush}"/>
            </Trigger>
            <Trigger Property="Tag" Value="gridHeader">
                <Setter Property="Background" Value="{StaticResource HeaderBGBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--TextBox--><!--
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="{StaticResource LightControlForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource LightControlForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource SecondaryDarkBackgroundBrush}"/>
    </Style>-->

    <!-- TEXTBOX -->
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="{StaticResource LightControlForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource PrimaryDarkBackgroundBrush}"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="SelectionBrush" Value="{StaticResource PrimaryLightBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="border"
                            Background="Transparent"
                                  BorderBrush="{StaticResource  HeaderBGBrush}"
                                  BorderThickness="0,0,0,0" >
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource DarkItemHoverBrush3}"/>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource SecondaryDarkBackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="border" Property="BorderThickness" Value="0,1,0,1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>


    <!--Label-->
    <Style TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{StaticResource LightControlForegroundBrush}"/>
    </Style>



    <!--PasswordBox-->
    <Style TargetType="{x:Type PasswordBox}">
        <Setter Property="Foreground" Value="{StaticResource LightControlForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource LightControlForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource SecondaryDarkBackgroundBrush}"/>
    </Style>

    <!--Separator-->
    <Style TargetType="{x:Type Separator}">
        <Setter Property="Margin" Value="0,3,0,3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Grid>
                        <Rectangle Height="1" Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type 
                            }}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Menu-->
    <Style TargetType="{x:Type Menu}">
        <Setter Property="Foreground" Value="{StaticResource LightControlForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource PrimaryDarkBackgroundBrush}"/>
    </Style>
    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="Foreground" Value="{StaticResource LightControlForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource SecondaryDarkBackgroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Border"
                        Background="{StaticResource PrimaryDarkBackgroundBrush}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid x:Name="Gridd" Background="{StaticResource PrimaryDarkBackgroundBrush}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="Col0" MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                <ColumnDefinition x:Name="Col3" Width="14"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Grid.Column="0" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>
                            <Grid Grid.Column="0" Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
                            </Grid>
                            <ContentPresenter Grid.Column="1" Margin="{TemplateBinding Padding}" x:Name="HeaderHost" RecognizesAccessKey="True" ContentSource="Header"/>
                            <ContentPresenter Grid.Column="2" Margin="60,1,8,1" x:Name="IGTHost" ContentSource="InputGestureText" VerticalAlignment="Center"/>
                            <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
                            </Grid>
                            <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                <Border x:Name="SubMenuBorder" BorderBrush="{StaticResource DarkItemHoverBrush2}" BorderThickness="1" Padding="2,2,2,2">
                                    <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                    </Grid>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Padding" Value="6,1,6,1"/>
                            <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                            <Setter Property="MinWidth" Value="0" TargetName="Col0"/>
                            <Setter Property="Width" Value="Auto" TargetName="Col3"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                            <Setter Property="Background" Value="{StaticResource SecondaryDarkBackgroundBrush}" TargetName="Border"/>
                        </Trigger>
                        <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Padding" Value="6,1,6,1"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>
                        <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                        </Trigger>
                        <!-- Role = SubMenuItem : this is a child menu item which has children-->
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                        </Trigger>
                        <!-- If no Icon is present the we collapse the Icon Content -->
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>
                        <!-- The GlyphPanel contains the CheckMark -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>
                        <!--  Background="{StaticResource PrimaryLightBrush}" -->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" Value="{StaticResource DarkItemHoverBrush}" TargetName="Gridd"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource DarkItemHoverBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="Foreground" Value="{StaticResource LightControlForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource SecondaryDarkBackgroundBrush}"/>
        <Setter Property="Padding" Value="1"/>
    </Style>
    <!-- DynamicMenuItem -->
    <!--
    <Style  TargetType="{x:Type View:DynamicMenuItem}">
        <Setter Property="Foreground" Value="{StaticResource LightControlForegroundBrush}"/>
    </Style>-->

    <!--Status bar-->
    <Style x:Key="{x:Type StatusBar}" TargetType="{x:Type StatusBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBar}">
                    <Border Padding="1">
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="{StaticResource DarkItemHoverColor}" Offset="0.0" />
                                        <GradientStop Color="{StaticResource SecondaryDarkBackgroundColor}" Offset="0.15" />
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Border.Background>
                        <ItemsPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type StatusBarItem}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Foreground" Value="{StaticResource LightControlForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBarItem}">
                    <ContentPresenter Margin="1" Name="ContentSite" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--PROGRESS BAR RAINBOW-->
    <Duration x:Key="ColorChangeTimeSpan">0:0:1</Duration>
    <Storyboard x:Key="FgChange" AutoReverse="False" RepeatBehavior="Forever" >
        <ColorAnimation  BeginTime="0:0:0" From="#FF0000" To="#FFFF00" Storyboard.TargetProperty="Foreground.(SolidColorBrush.Color)"    Duration="{StaticResource ColorChangeTimeSpan}"/>
        <ColorAnimation  BeginTime="0:0:1" To="#00FF00" Storyboard.TargetProperty="Foreground.(SolidColorBrush.Color)"    Duration="{StaticResource ColorChangeTimeSpan}"/>
        <ColorAnimation  BeginTime="0:0:2" To="#00FFFF" Storyboard.TargetProperty="Foreground.(SolidColorBrush.Color)"    Duration="{StaticResource ColorChangeTimeSpan}"/>
        <ColorAnimation  BeginTime="0:0:3" To="#0000FF" Storyboard.TargetProperty="Foreground.(SolidColorBrush.Color)"    Duration="{StaticResource ColorChangeTimeSpan}"/>
        <ColorAnimation  BeginTime="0:0:4" To="#FF00FF" Storyboard.TargetProperty="Foreground.(SolidColorBrush.Color)"    Duration="{StaticResource ColorChangeTimeSpan}"/>
        <ColorAnimation  BeginTime="0:0:5" To="#FF0000" Storyboard.TargetProperty="Foreground.(SolidColorBrush.Color)"    Duration="{StaticResource ColorChangeTimeSpan}"/>
    </Storyboard>
    <SolidColorBrush  x:Key="RedBrush" Color="#FF0000" />
    <Style TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{StaticResource RedBrush}" />
        <Setter Property="Background" Value="{StaticResource PrimaryDarkBackgroundBrush}" />
        <Style.Triggers>
            <Trigger Property="IsVisible"  Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard x:Name="ProgressBarVisible" Storyboard="{StaticResource FgChange}" />
                </Trigger.EnterActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--TABS-->
    <Style TargetType="{x:Type TabControl}">
        <Setter Property="BorderBrush" Value="{StaticResource DarkItemHoverBrush}" />
        <Setter Property="Background" Value="{StaticResource SecondaryDarkBackgroundBrush}"/>
    </Style>
    <Style TargetType="{x:Type TabItem}">
        <Setter Property="Foreground" Value="{StaticResource LightControlForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource DarkItemHoverBrush}" />
        <Setter Property="Background" Value="{StaticResource PrimaryDarkBackgroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}" >
                    <Border x:Name="selectedBorder"  CornerRadius="0" BorderBrush="{StaticResource PrimaryLightBrush}" BorderThickness="0,0,0,0"  >
                        <Border  Background="{TemplateBinding Background}" CornerRadius="0" BorderBrush="{StaticResource DarkItemHoverBrush}" BorderThickness="1,1,1,0" Padding = "4,2,4,0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" ContentSource="Header"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderThickness"  Value="0,4,0,0" TargetName="selectedBorder"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background"  Value="{StaticResource DarkItemHoverBrush2}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="False">
                <Setter Property="Foreground"  Value="{StaticResource LightControlForegroundBrush2}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background"  Value="{StaticResource DarkItemHoverBrush2}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--COMBOBOX!-->
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid >
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="7*"/>
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Border x:Name="Border" CornerRadius="0" Grid.ColumnSpan="2" BorderBrush="{StaticResource DarkItemHoverBrush}" BorderThickness="1" />
            <Border  Grid.Column="0" CornerRadius="0" Margin="1"  Background="{StaticResource PrimaryDarkBackgroundBrush}" BorderBrush="{StaticResource DarkItemHoverBrush}" BorderThickness="0,0,1,0" />
            <Path  x:Name="Arrow"   Grid.Column="1" StrokeThickness="2"   Fill="{StaticResource LightControlForegroundBrush}"   HorizontalAlignment="Center"  
                   VerticalAlignment="Center" Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"  />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource DarkItemHoverBrush2}" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource DarkItemHoverBrush2}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource LightControlForegroundBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>

    <Style  TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Foreground" Value="{StaticResource LightControlForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton 
                            Name="ToggleButton" 
                            Template="{StaticResource ComboBoxToggleButton}" 
                            Grid.Column="2" 
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Margin="3,3,23,3"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left" />
                        <TextBox x:Name="PART_EditableTextBox"
                            Style="{x:Null}" 
                            Template="{StaticResource ComboBoxTextBox}" 
                            HorizontalAlignment="Left" 
                            VerticalAlignment="Center" 
                            Margin="3,3,23,3"
                            Focusable="True" 
                            Background="{StaticResource PrimaryDarkBackgroundBrush}" 
                            Foreground="{StaticResource LightControlForegroundBrush}"
                            Visibility="Hidden"
                            IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup 
                            Name="Popup"
                            Placement="Bottom"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            AllowsTransparency="True" 
                            Focusable="False"
                            PopupAnimation="Slide">

                            <Grid Name="DropDown"
                              SnapsToDevicePixels="True"                
                              MinWidth="{TemplateBinding ActualWidth}"
                              MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border 
                                x:Name="DropDownBorder"
                                Background="{StaticResource PrimaryDarkBackgroundBrush}" 

                                BorderThickness="1"
                                BorderBrush="{StaticResource DarkItemHoverBrush}" />
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground"  Value="{StaticResource DarkItemHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0"/>
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable"  Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>

    <!--  ComboBoxItem -->
    <Style  TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Foreground" Value="{StaticResource LightControlForegroundBrush}"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Border"
                              Padding="2"
                              SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DarkItemHoverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground"  Value="{StaticResource DarkItemHoverBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  SLIDER!!! -->
    <Style x:Key="SliderRepeatButton" TargetType="RepeatButton">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border  BorderThickness="1" BorderBrush="{StaticResource DarkItemHoverBrush}" Background="{StaticResource PrimaryDarkBackgroundBrush}"  Height="7"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SliderRepeatButton1" TargetType="RepeatButton">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border SnapsToDevicePixels="True" Background="{StaticResource  LightControlForegroundBrush}"  BorderThickness="1" BorderBrush="{StaticResource DarkItemHoverBrush}" Height="7"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SliderThumb" TargetType="Thumb">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Thumb">
                    <Border BorderBrush="{StaticResource DarkItemHoverBrush}" BorderThickness="1" Background="{StaticResource DarkItemHoverBrush}" >
                        <Rectangle Name="sliderThumb"  Height="24" Width="8" Fill="{StaticResource DarkItemHoverBrush}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="sliderThumb" Property="Fill" Value="#aaa"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="Slider"  TargetType="Slider">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Track Grid.Row="1" x:Name="PART_Track"   >
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource SliderRepeatButton1}"  Command="Slider.DecreaseLarge" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource SliderThumb}"  />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource SliderRepeatButton}" Command="Slider.IncreaseLarge" />
                </Track.IncreaseRepeatButton>
            </Track>
        </Grid>
    </ControlTemplate>

    <Style TargetType="{x:Type Slider}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="MinHeight" Value="21" />
                <Setter Property="MinWidth" Value="104" />
                <Setter Property="Template" Value="{StaticResource Slider}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- CHECKBOX -->
    <Style  TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{StaticResource LightControlForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <StackPanel Orientation="Horizontal">
                        <Grid >
                            <Border x:Name="CheckBorder" CornerRadius="0" Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" BorderBrush="{StaticResource DarkItemHoverBrush}" 
                                    BorderThickness="2" Padding="4,4,4,4" VerticalAlignment="Center" Background="{StaticResource PrimaryDarkBackgroundBrush}">
                                <Path  x:Name="Check"   Grid.Column="1" StrokeThickness="1" Stroke="{StaticResource  DarkItemHoverBrush}"   Fill="{StaticResource  DarkItemHoverBrush}"  
                                       HorizontalAlignment="Center"  VerticalAlignment="Center"  Data="m 0 12 l 10 10 l 14 -14 l -4 -4 l-10 10 l-6 -6 l-4 4 l 4 4"  />
                            </Border>
                        </Grid>
                        <Grid x:Name="paddingGrid" Width="10" Height="10"/>
                        <ContentPresenter VerticalAlignment="Center" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Check" Property="Fill" Value="{StaticResource LightControlForegroundBrush}"  />
                        </Trigger>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter TargetName="paddingGrid" Property="Visibility" Value="Collapsed"  />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Padding" Value="2,2,2,2" TargetName="CheckBorder"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="CheckBorder" Property="Background" Value="{StaticResource DarkItemHoverBrush2 }"  />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--SCROLLBAR-->
    <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="buttonBorder" Background="{StaticResource DarkItemHoverBrush4}">
                        <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" 
                              Data="{Binding Content,   RelativeSource={RelativeSource TemplatedParent}}"  Fill="{StaticResource LightControlForegroundBrush}">
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="buttonBorder" Property="Background" Value="{StaticResource  DarkItemHoverBrush3}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarPageButton"  TargetType="{x:Type RepeatButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="{StaticResource DarkItemHoverBrush4}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border x:Name="border"  CornerRadius="0"  Background="{StaticResource  DarkItemHoverBrush}" 
                            BorderBrush="{StaticResource DarkItemHoverBrush}"  BorderThickness="1" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource  DarkItemHoverBrush3}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid >
            <Grid.RowDefinitions>
                <RowDefinition MaxHeight="18" />
                <RowDefinition Height="0.00001*" />
                <RowDefinition MaxHeight="18" />
            </Grid.RowDefinitions>
            <Border Grid.RowSpan="3" CornerRadius="2" Background="{StaticResource DarkItemHoverBrush4}" />
            <RepeatButton Grid.Row="0"
                  Style="{StaticResource ScrollBarLineButton}"
                  Height="18"
                  Command="ScrollBar.LineUpCommand"
                  Content="M 0 4 L 8 4 L 4 0 Z" />

            <Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" Margin="2,2,2,2"/>
                </Track.DecreaseRepeatButton>

                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}"  />
                </Track.Thumb>

                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand" Margin="2,2,2,2" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Row="2"
                  Style="{StaticResource ScrollBarLineButton}"
                  Height="18"
                  Command="ScrollBar.LineDownCommand"
                  Content="M 0 0 L 4 4 L 8 0 Z" />
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="HorizontalScrollBar"   TargetType="{x:Type ScrollBar}">
        <Grid >
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="18" />
                <ColumnDefinition Width="0.00001*" />
                <ColumnDefinition MaxWidth="18" />
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="3"   CornerRadius="2"  Background="{StaticResource DarkItemHoverBrush4}"/>

            <RepeatButton Grid.Column="0"
                  Style="{StaticResource ScrollBarLineButton}"
                  Width="18"
                  Command="ScrollBar.LineLeftCommand"
                  Content="M 4 0 L 4 8 L 0 4 Z" />

            <Track x:Name="PART_Track"  Grid.Column="1" IsDirectionReversed="False" >
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" Margin="2,2,2,2"/>
                </Track.DecreaseRepeatButton>

                <Track.Thumb>
                    <Thumb  Style="{StaticResource ScrollBarThumb}"  />
                </Track.Thumb>

                <Track.IncreaseRepeatButton>
                    <RepeatButton  Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand" Margin="2,2,2,2" />
                </Track.IncreaseRepeatButton>
            </Track>

            <RepeatButton Grid.Column="2"
                  Style="{StaticResource ScrollBarLineButton}"
                  Width="18"
                  Command="ScrollBar.LineRightCommand"
                  Content="M 0 0 L 4 4 L 0 8 Z" />

        </Grid>
    </ControlTemplate>

    <Style  TargetType="{x:Type ScrollBar}">
        <Style.Triggers>
            <Trigger Property="Orientation"  Value="Horizontal">
                <Setter Property="Template"    Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation"    Value="Vertical">
                <Setter Property="Template"     Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style TargetType="{x:Type ScrollViewer}">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent" />
        </Style.Resources>
    </Style>


</ResourceDictionary>
